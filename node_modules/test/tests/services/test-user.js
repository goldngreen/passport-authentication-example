

const assert = require('assert');

const UserService = require('server/services/user').UserService;
const Database = require('server/data').Database;
const userTestData = require('test/services/test-data').user;

describe('user-service', async () => {
    const testDatabase = '.data/test.sqlite';
    const database = new Database(testDatabase);

    before(async function() {
        await database.authenticate();
        await database.initSchema();
        userService = new UserService(database);
        console.log('Exiting before');
    });
    
    it('should create a user', async () => {
        console.log('Entering create user');
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        console.log(`createUser:1 user is ${user}, user.id is ${user.id}`);
    });
    
    it('should create a user aswell', async () => {
        console.log('Entering create user');
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        console.log(`createUser:2 user is ${user}, user.id is ${user.id}`);
    });

    it('should find a user by id', async () => {
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        console.log(`FindById: user is ${user}, user.id is ${user.id}`);
        const found = await userService.findById(user.id);
        console.log(`Found user: ${found}`);
    });

    it('should reject an invalid user', () => {
        const user = Object.assign({}, userTestData.sample());
        delete user.username;
        assert.throws( () => userService.createUser(user), { name: 'TypeError' } );
    });

    it('should be easy to isolate test code', () => {
    });
});