

const assert = require('assert');

const UserService = require('server/services/user').UserService;
const Database = require('server/data').Database;
const userTestData = require('test/services/test-data').user;
const logger = require('server/useful/logular').defaultLogger;

"use strict";

describe('user-service', async () => {
    const testDatabase = '.data/test.sqlite';
    const database = new Database(testDatabase);

    before(async function() {
        logger.trace('Entering before test');
        await database.authenticate();
        await database.initSchema();
        userService = new UserService(database);
        logger.trace('Exiting before test');
    });
    
    it('should create a user', async () => {
        logger.trace('Entering create user test');
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        logger.info(`createUser:1 user is ${user.username}, user.id is ${user.id}`);
        logger.trace('Exiting create user test');
    });
    
    it('should create a user aswell', async () => {
        logger.trace('Entering create user test');
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        logger.info(`createUser:2 user is ${user.username}, user.id is ${user.id}`);
        logger.trace('Exiting create user test');
    });

    it('should find a user by id', async () => {
        logger.trace('Entering findById test');
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        logger.info(`FindById: user is ${user.username}, user.id is ${user.id}`);
        const found = await userService.findById(user.id);
        logger.info(`Found user: ${found.username}, user.id is ${found.id}`);
        assert.ok(found.id);
        logger.trace('Exiting findById test');
    });

    it('should find a user by username', async () => {
        logger.trace('Entering findByUsername test');
        const sample = await userTestData.sample();
        const user = await userService.createUser(sample);
        logger.info(`FindByUsername: user is ${user.username}, user.id is ${user.id}`);
        const found = await userService.findByUsername(user.username);
        logger.info(`Found user: ${found.username}`);
        assert.strictEqual(found.username, user.username);
        logger.trace('Exiting findByUsername test');
    });

    it('should reject an invalid user', () => {
        // const user = Object.assign({}, userTestData.sample());
        // delete user.username;
        // assert.throws( () => userService.createUser(user), { name: 'TypeError' } );
    });

    it('should be easy to isolate test code', () => {
    });
});